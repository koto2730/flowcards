default_platform(:ios)

platform :ios do
  desc "Build the iOS application for App Store distribution"
  lane :build_release do
    
    # Define paths for temporary files
    keychain_name = "temp_build_keychain"
    keychain_password = "temp_password"
    cert_path = File.expand_path("./certificate.p12")
    prov_profile_path = File.expand_path("./profile.mobileprovision")

    begin
      # 1. Ensure build directory exists
      FileUtils.mkdir_p("./build")

      # 2. Create a new temporary keychain
      delete_keychain(name: keychain_name) if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      
      create_keychain(
        name: keychain_name,
        password: keychain_password,
        unlock: true,
        timeout: 3600,
        add_to_search_list: true,
        default_keychain: false  # Don't set as default to avoid conflicts
      )

      # 3. Decode and import the certificate
      UI.message("Decoding certificate...")
      File.open(cert_path, "wb") do |file|
        file.write(Base64.decode64(ENV["APPLE_CERTIFICATE_BASE64"]))
      end
      
      import_certificate(
        keychain_name: keychain_name,
        certificate_path: cert_path,
        certificate_password: ENV['APPLE_CERTIFICATE_PASSWORD']
      )

      # 4. Set keychain settings to allow access
      sh("security set-keychain-settings -t 3600 -u ~/Library/Keychains/#{keychain_name}-db")
      sh("security unlock-keychain -p '#{keychain_password}' ~/Library/Keychains/#{keychain_name}-db")
      
      # 5. Set partition list to allow codesign to access the keychain
      sh("security set-key-partition-list -S apple-tool:,apple: -s -k '#{keychain_password}' ~/Library/Keychains/#{keychain_name}-db")

      # 6. Decode and install provisioning profile
      UI.message("Installing provisioning profile...")
      File.open(prov_profile_path, "wb") do |file|
        file.write(Base64.decode64(ENV["PROVISIONING_PROFILE_BASE64"]))
      end
      install_provisioning_profile(path: prov_profile_path)
      
      # 7. Get the provisioning profile name from the installed profile
      profile_info = sh("security cms -D -i '#{prov_profile_path}'", log: false)
      profile_plist = Plist.parse_xml(profile_info)
      profile_name = profile_plist["Name"]
      UI.message("Using provisioning profile: #{profile_name}")

      # 8. Set build number (use CI build number if available)
      build_number = ENV['CI_BUILD_NUMBER'] || (get_build_number + 1).to_s
      increment_build_number(build_number: build_number)
      
      # 9. Build the app
      UI.message("Building app with gym...")
      gym(
        scheme: "FlowCards",
        workspace: "FlowCards.xcworkspace",
        output_directory: "./build",
        output_name: "FlowCards.ipa",
        clean: true,
        export_method: "app-store-connect",  # Use app-store-connect instead of deprecated app-store
        export_options: {
          method: "app-store-connect",
          provisioningProfiles: {
            # Use the actual profile name from the installed profile
            "com.mugime.flowcards" => profile_name
          }
        }
      )
      
      UI.success("Successfully built iOS app!")
      
    rescue => e
      UI.error("Build failed: #{e.message}")
      UI.error("Backtrace: #{e.backtrace.join("\n")}")
      raise e
    ensure
      # Clean up keychain
      begin
        delete_keychain(name: keychain_name)
      rescue
        UI.warning("Failed to delete keychain, but continuing...")
      end
      
      # Clean up temporary files
      File.delete(cert_path) if File.exist?(cert_path)
      File.delete(prov_profile_path) if File.exist?(prov_profile_path)
    end
  end

  desc "Simple build for testing"
  lane :build_simple do
    # Increment build number
    increment_build_number
    
    # Enable automatic provisioning
    automatic_code_signing(
      use_automatic_signing: true,
      team_id: "362PH5HAWW",  # Your team ID from the distribution certificate
      code_sign_identity: "iPhone Developer"
    )
    
    # Just try to build with automatic provisioning
    gym(
      scheme: "FlowCards",
      workspace: "FlowCards.xcworkspace",
      output_directory: "./build",
      output_name: "FlowCards.ipa",
      clean: true,
      export_method: "development",
      export_options: {
        method: "development"
      },
      # Allow provisioning updates for CI
      xcargs: "-allowProvisioningUpdates"
    )
  end
end