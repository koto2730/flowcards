name: Release Build for Android and iOS

on:
  push:
    branches:
      - main # mainブランチにマージされたら実行
      - feat/setup-ci # テスト用に現在のブランチを追加
  workflow_dispatch: {} # GitHub上で手動実行するためのトリガー

env:
  BUILD_NUMBER_OFFSET: 3 # Current highest build number in the stores

jobs:
  build-android:
    name: Build Android App Bundle
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # プロジェクトに合わせたバージョンを指定

      - name: Install dependencies
        run: npm install

      - name: Build Android App Bundle (AAB)
        run: cd android && ./gradlew bundleRelease -PversionCode=${{ env.BUILD_NUMBER_OFFSET + github.run_number }}

      - name: Sign AAB
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload AAB
        uses: actions/upload-artifact@v3
        with:
          name: app-release.aab
          path: android/app/build/outputs/bundle/release/app-release-signed.aab

  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install npm dependencies
        run: npm install

      - name: Set up Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6.10' # From Gemfile
          bundler-cache: true # Runs bundle install

      - name: Install CocoaPods
        run: cd ios && pod install

      - name: Decode Certificate and Provisioning Profile
        run: |
          echo -n "${{ secrets.APPLE_CERTIFICATE_BASE64 }}" | base64 --decode -o "distribution.p12"
          echo -n "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode -o "FlowCards_AppStore.mobileprovision"

      - name: Build iOS App with fastlane
        run: cd ios && bundle exec fastlane build_release
        env:
          CI_BUILD_NUMBER: ${{ env.BUILD_NUMBER_OFFSET + github.run_number }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          CERTIFICATE_FILE_PATH: "../distribution.p12"
          PROVISIONING_PROFILE_PATH: "../FlowCards_AppStore.mobileprovision"
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: FlowCards.ipa
          path: ios/build/FlowCards.ipa # Path where gym outputs the IPA
